version: '3.8'
services:

  python-service:
    container_name: python-service
    build:
      context: ./lstm_sgd
      dockerfile: Dockerfile
    image: python-service:latest
    ports:
      - "5000:5000"
    restart: unless-stopped
    networks:
      - net

  kafkaui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafkaui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka-1:19092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium-connect:8083
      KAFKA_CLUSTERS_0_KAFKACONNECT_1_NAME: mongo-sink-connector
      KAFKA_CLUSTERS_0_KAFKACONNECT_1_ADDRESS: http://mongo-sink-connector:8084
      KAFKA_CLUSTERS_0_KAFKACONNECT_2_NAME: pg-sink
      KAFKA_CLUSTERS_0_KAFKACONNECT_2_ADDRESS: http://pg-sink:8085
    depends_on:
      - kafka-1
      - debezium-connect
    networks:
      - net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "2181:2181"
    networks:
      - net

  kafka-1:
    image: confluentinc/cp-kafka:7.2.1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      - net

  postgres:
    image: postgres:15
    container_name: local_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: db
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    networks:
      - net

  debezium-connect:
    image: debezium/connect:2.7.0.Final
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka-1:19092"
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_PLUGIN_PATH: "/kafka/connect,/debezium-connector-postgres,/debezium-connector-mongodb"
    depends_on:
      - kafka-1
      - postgres
    networks:
      - net

  init-connector:
    image: curlimages/curl:latest
    container_name: init-connector
    depends_on:
      - debezium-connect
    volumes:
      - ./init-connector.sh:/init-connector.sh
    command: [ "sh", "/init-connector.sh" ]
    networks:
      - net

volumes:
  postgres_data:

networks:
  net:
    driver: bridge
